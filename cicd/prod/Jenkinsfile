pipeline {
    agent any
    environment {
        GITHUB_TOKEN = credentials('1065fcd9-c161-4918-b82d-7e4ff251ef79')
        GOOGLE_CREDENTIALS = credentials('32098b2f-a737-4a58-98fc-cc90e05491de')
        GOOGLE_PROJECT = 'doantn-442713'
        CLUSTER_NAME = 'truongdatn'
        CLUSTER_ZONE = 'us-central1'
        REGION_REGISTRY = 'asia-southeast1-docker.pkg.dev'
        REGISTRY_PROJECT = 'cicd-registry'
        SPRING_PROFILES_ACTIVE_VARIABLE = 'prod'

        TELEGRAM_TOKEN = credentials('tr_telegram_access')
        TELEGRAM_CHAT_ID = credentials('tr_telegram_id')
    }
//     triggers {
//         // Trigger ch·ªâ ch·∫°y khi c√≥ push tag v√†o nh√°nh 'prod'
//         githubPush()
    }
    stages {
        stage('Check Tag Trigger') {
            steps {
                script {
                    // L·ªánh ki·ªÉm tra xem c√≥ ph·∫£i l√† Git Tag hay kh√¥ng
                    def ref = sh(script: "git describe --tags --exact-match || echo ''", returnStdout: true).trim()

                    // Ki·ªÉm tra n·∫øu kh√¥ng ph·∫£i tag
                    if (ref == '') {
                        currentBuild.result = 'ABORTED'
                        error("Pipeline aborted: This pipeline runs only for Git Tag creation. Current ref: ${ref}")
                    }
                    echo "Pipeline triggered by Git Tag: ${ref}"
                }
            }
        }
        stage('Checkout') {
            steps {
                git branch: 'prod', url: "https://$GITHUB_TOKEN@github.com/truongnguyen9602/score-high-school-graduation-backend.git"
            }
        }
        stage('Set Git Variables') {
            steps {
                script {
                    env.GIT_REPO = scm.getUserRemoteConfigs()[0].getUrl().tokenize('/').last().replace('.git', '')
                    env.GIT_COMMIT = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
                    env.GIT_AUTHOR = sh(script: "git log -1 --pretty=format:'%an'", returnStdout: true).trim()
                    env.VERSION = sh(script: "git describe --tags || echo \"latest\"", returnStdout: true).trim()
                }
            }
        }
        stage('Unit test') {
            steps {
                sh '''
                    chmod +x ./mvnw
                    ./mvnw test
                '''
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                script {
                    sh """
                        sudo docker system prune -af
                        gcloud auth activate-service-account --key-file=$GOOGLE_CREDENTIALS
                        gcloud auth configure-docker $REGION_REGISTRY
                        docker build -t $REGION_REGISTRY/$GOOGLE_PROJECT/$REGISTRY_PROJECT/prod/graduation:$VERSION .
                        docker push $REGION_REGISTRY/$GOOGLE_PROJECT/$REGISTRY_PROJECT/prod/graduation:$VERSION
                    """
                }
            }
        }
        stage('Deploy to GKE') {
            steps {
                withCredentials([file(credentialsId: '32098b2f-a737-4a58-98fc-cc90e05491de', variable: 'GOOGLE_CREDENTIALS')]) {
                    sh """
                        gcloud auth activate-service-account --key-file=$GOOGLE_CREDENTIALS
                        gcloud config set project $GOOGLE_PROJECT
                        gcloud container clusters get-credentials $CLUSTER_NAME --zone $CLUSTER_ZONE
                        export VERSION=$VERSION
                        envsubst < ./cicd/prod/deployment.yaml > ./cicd/prod/deployment-generated.yaml
                        kubectl apply -n prod -f ./cicd/prod/deployment-generated.yaml --validate=false
                        kubectl rollout status -n prod deployment/graduation-v1
                    """
                }
            }
        }
    }
    post {
        success {
            withCredentials([string(credentialsId: 'tr_telegram_access', variable: 'TELEGRAM_TOKEN'),
                             string(credentialsId: 'tr_telegram_id', variable: 'TELEGRAM_CHAT_ID')]) {
                script {
                    def escapeForHTML = { text ->
                        text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;").replace('"', "&quot;").replace("'", "&#39;")
                    }
                    def buildLink = escapeForHTML(env.BUILD_URL)
                    def repoLink = escapeForHTML("https://github.com/${env.GIT_REPO}")
                    def actor = escapeForHTML(env.GIT_AUTHOR)
                    def commitHash = escapeForHTML(env.GIT_COMMIT)

                    def message = """
üöÄ ---PRODUCTION-BACKEND---
Status: ‚úÖ Success
Actor: ${actor}
Repository: ${env.GIT_REPO}
Link: ${buildLink}
Commit: ${commitHash}
"""
                    sh """
                    curl -s -X POST https://api.telegram.org/bot"$TELEGRAM_TOKEN"/sendMessage \
                    -d chat_id="$TELEGRAM_CHAT_ID" \
                    -d parse_mode="HTML" \
                    -d text="${message}"
                    """
                }
            }
        }
        failure {
            withCredentials([string(credentialsId: 'tr_telegram_access', variable: 'TELEGRAM_TOKEN'),
                             string(credentialsId: 'tr_telegram_id', variable: 'TELEGRAM_CHAT_ID')]) {
                script {
                    def escapeForHTML = { text ->
                        text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;").replace('"', "&quot;").replace("'", "&#39;")
                    }
                    def buildLink = escapeForHTML(env.BUILD_URL)

                    def message = """
‚ö†Ô∏è ---PRODUCTION-BACKEND---
Status: ‚ùå Failure
Link: ${buildLink}
"""
                    sh """
                    curl -s -X POST https://api.telegram.org/bot"$TELEGRAM_TOKEN"/sendMessage \
                    -d chat_id="$TELEGRAM_CHAT_ID" \
                    -d parse_mode="HTML" \
                    -d text="${message}"
                    """
                }
            }
        }
    }
}